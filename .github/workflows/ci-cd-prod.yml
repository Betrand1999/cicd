name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  push:
    branches:
      - main


jobs:
  ##################### Build ################
  build:
    name: Build
    runs-on: [self-hosted] # [self-hosted, Linux, X64,ip-172-31-22-214]
    if: github.event.pull_request.merged == true
    environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        shell: bash
        run: |
          python3 -m venv venv 
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
# python3 -m venv venv = create virtual env  inside your project directory
# source venv/bin/activate = activate and install dependencies

      - name: Clean Dist Directory
        shell: bash
        run: |
          rm -rf build dist *.egg-info

      - name: Build Package
        shell: bash
        run: |
          source venv/bin/activate
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel
          ls dist

  ##################### Unit-Test ################
  test:
    name: Unit-Test
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: build
    environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        shell: bash
        run: |
          source venv/bin/activate
          pip install pytest
          pytest test_app.py

  ##################### SonarQube Scan ################
  sonarqube:
    name: SonarQube Scan
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: test
    environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  #################### Package and Publish to PyPI ################
  package-and-publish:
    name: Package and Publish to PyPI
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: sonarqube
    environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment for Packaging
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Clean Dist Directory
        shell: bash
        run: |
          rm -rf dist

      - name: Build Package
        shell: bash
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        shell: bash
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*


 
  #################### Deploy Artifact Server ################
  deploy:
   name: Deploy Artifact Server on EC2
   runs-on: ubuntu-latest
   needs: package-and-publish
   environment: prod
   steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH Connection to EC2
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Flask Server on EC2
      run: |
        ssh -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Go to the project directory
          cd ~/actions-runner/_work/cicd/cicd

          # Activate Virtual Environment and Install Dependencies
          python3 -m venv venv
          source venv/bin/activate
          pip install flask flask-httpauth

          # Create Flask App with Authentication
          cat <<FLASK > server.py
          from flask import Flask, send_from_directory
          from flask_httpauth import HTTPBasicAuth
          from werkzeug.security import generate_password_hash, check_password_hash
          import os

          app = Flask(__name__)
          auth = HTTPBasicAuth()
          ARTIFACT_DIR = "dist"

          users = {
              "${{ secrets.BASIC_AUTH_USER }}": generate_password_hash("${{ secrets.BASIC_AUTH_PASS }}")
          }

          @auth.verify_password
          def verify_password(username, password):
              if username in users and check_password_hash(users.get(username), password):
                  return username
              return None

          @app.route("/")
          @auth.login_required
          def list_files():
              files = os.listdir(ARTIFACT_DIR)
              links = [f'<a href="/files/{file}">{file}</a><br>' for file in files]
              return f"<h1>Available Artifacts</h1><p>Welcome, {auth.current_user()}!</p>" + "".join(links)

          @app.route("/files/<path:filename>")
          @auth.login_required
          def serve_file(filename):
              return send_from_directory(ARTIFACT_DIR, filename)

          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=5000)
          FLASK

          # Stop existing Flask server if running
          pkill -f server.py || true

          # Start Flask Server in Background
          nohup python server.py > flask.log 2>&1 &

          echo "Flask server started on EC2!"
        EOF