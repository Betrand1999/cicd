name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  ##################### Build Python Package ################
  build:
    name: Build Python Package
    runs-on: [self-hosted]
    if: github.event.pull_request.merged == true
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir

      - name: Ensure dist directory exists
        run: mkdir -p dist

      - name: Build Python Package
        run: |
          source venv/bin/activate
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel
          ls -lah dist/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-artifact
          path: dist/

  ##################### Run Unit Tests ################
  test:
    name: Run Unit Tests
    runs-on: [self-hosted]
    needs: build
    environment: prod
    continue-on-error: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          source venv/bin/activate
          pip install pytest
          pytest test_app.py

  #################### SonarQube Scan ################
  sonarqube:
    name: SonarQube Scan
    runs-on: [self-hosted]
    timeout-minutes: 3
    needs: test
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  ################### Publish to PyPI ################
  package-and-publish:
    name: Publish to PyPI
    runs-on: [self-hosted]
    needs: sonarqube
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment for Packaging
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Clean Dist Directory
        run: rm -rf dist

      - name: Build Package
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*

  ################### Deploy Python Artifact as Docker Image ################
  deploy-docker:
    name: Containerized Artifact and Push as Docker Image to Docker Hub
    runs-on: [self-hosted]
    needs: package-and-publish
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: built-artifact
          path: dist/

      - name: Debug Artifact and Environment Variables
        run: |
          echo "üîç Checking dist/ directory contents:"
          ls -lah dist/

      - name: Authenticate with Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          echo "üîë Docker authentication successful!"

      - name: Set Working Directory
        run: cd /home/ubuntu/actions-runner/_work/cicd/cicd && ls -lah

      - name: Verify Artifact Presence
        run: |
          ls -lah /home/ubuntu/actions-runner/_work/cicd/cicd/dist

      - name: Build and Push Docker Image
        run: |
          sudo docker build -t betrand1997/cicd-image -f /home/ubuntu/actions-runner/_work/cicd/cicd/Dockerfile /home/ubuntu/actions-runner/_work/cicd/cicd
          sudo docker push betrand1997/cicd-image


       
  ################### Deploy to Minikube ################
  deploy-to-minikube:
    name: Deploy to K8s minikube
    runs-on: self-hosted
    needs: deploy-docker
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 'latest'
          driver: docker

      - name: Deploy to Kubernetes
        run: |
          sudo su ubuntu
          kubectl apply -f kubernetes/k8s-deployment.yaml
          kubectl apply -f kubernetes/k8s-deployment-service.yaml

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/hello-world-app -n cicd-namespace
          kubectl get pods -n cicd-namespace
          minikube service hello-world-app-service -n cicd-namespace --url

## minikube start --profile=minikube

