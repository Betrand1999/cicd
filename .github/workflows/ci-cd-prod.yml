name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  ##################### Build ################
  build:
    name: Build
    runs-on: [self-hosted] # [self-hosted, Linux, X64,ip-172-31-22-214]
    if: github.event.pull_request.merged == true
    environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        shell: bash
        run: |
          python3 -m venv venv 
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
# python3 -m venv venv = create virtual env  inside your project directory
# source venv/bin/activate = activate and install dependencies

      - name: Clean Dist Directory
        shell: bash
        run: |
          rm -rf build dist *.egg-info

      - name: Build Package
        shell: bash
        run: |
          source venv/bin/activate
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel
          ls dist

  ##################### Unit-Test ################
  test:
    name: Unit-Test
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: build
    environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment
    continue-on-error: true


    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        shell: bash
        run: |
          source venv/bin/activate
          pip install pytest
          pytest test_app.py

  ##################### SonarQube Scan ################
  sonarqube:
    name: SonarQube Scan
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: test
    environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment
    


    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  #################### Package and Publish to PyPI ################
  package-and-publish:
    name: Package and Publish to PyPI
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: sonarqube
    environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment
    


    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment for Packaging
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Clean Dist Directory
        shell: bash
        run: |
          rm -rf dist

      - name: Build Package
        shell: bash
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        shell: bash
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*

#################### Deploy to Docker Hub ################
  Contanarised-py-Artifact-and-Push-Image-to-dockerhub:
   name: Deploy Docker Image
   runs-on: [self-hosted]  # Runs on your self-hosted runner with Docker
   needs: package-and-publish
   environment: prod  # ðŸ”¹ Fetch secrets from the 'prod' environment

   steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Get Latest Artifact
      run: |
        LATEST_WHL=$(ls -t dist/*.whl | head -n 1)
        echo "LATEST_WHL=$LATEST_WHL" >> $GITHUB_ENV
        echo "Using artifact: $LATEST_WHL"

    - name: Create Dockerfile
      run: |
        cat <<EOF > Dockerfile
        FROM python:3.9-slim

        WORKDIR /app
        COPY dist/\$LATEST_WHL /app/

        RUN pip install /app/\$LATEST_WHL

        CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=8000"]
        EOF

    - name: Authenticate with Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and Push Docker Image
      run: |
        DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/my-app:latest"
        docker build -t $DOCKER_IMAGE .
        docker push $DOCKER_IMAGE

        echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV

  # he port inside the Docker container must match the port that the Python Flask application # 