name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  ##################### Build ################
  build:
    name: Build
    runs-on: [self-hosted] # [self-hosted, Linux, X64,ip-172-31-22-214]
    if: github.event.pull_request.merged == true
    environment: prod  # 🔹 Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        shell: bash
        run: |
          python3 -m venv venv 
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
# python3 -m venv venv = create virtual env  inside your project directory
# source venv/bin/activate = activate and install dependencies

      - name: Clean Dist Directory
        shell: bash
        run: |
          rm -rf build dist *.egg-info

      - name: Build Package
        shell: bash
        run: |
          source venv/bin/activate
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel
          ls dist

  ##################### Unit-Test ################
  test:
    name: Unit-Test
    if: false
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: build
    environment: prod  # 🔹 Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        shell: bash
        run: |
          source venv/bin/activate
          pip install pytest
          pytest test_app.py

  ##################### SonarQube Scan ################
  sonarqube:
    name: SonarQube Scan
    if: false
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: test
    environment: prod  # 🔹 Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  #################### Package and Publish to PyPI ################
  package-and-publish:
    name: Package and Publish to PyPI
    runs-on:  [self-hosted] # [self-hosted, Linux, X64]
    needs: sonarqube
    environment: prod  # 🔹 Fetch secrets from the 'prod' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment for Packaging
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Clean Dist Directory
        shell: bash
        run: |
          rm -rf dist

      - name: Build Package
        shell: bash
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        shell: bash
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*


 
  #################### Deploy Artifact Server ################
    #################### Deploy Artifact Server ################
  deploy:
   name: Deploy Artifact Server on EC2
   runs-on: ubuntu-latest
   needs: package-and-publish
   environment: prod
   steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH Connection to EC2
      run: |
       mkdir -p ~/.ssh
       echo "${{ secrets.EC2_KEY }}" > ~/.ssh/ec2_key.pem
       chmod 600 ~/.ssh/ec2_key.pem
       ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Flask Server on EC2
      run: |
        ssh -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << EOF
          cd /home/ubuntu/actions-runner/_work/cicd/cicd

          # Create a virtual environment
          python3 -m venv venv
          source venv/bin/activate

          # Install Flask
          pip install flask

          # Dynamically find the latest built `.whl` file
          LATEST_WHL=\$(ls -t dist/*.whl | head -n 1)
          echo "Installing latest artifact: \$LATEST_WHL"

          # Ensure a .whl file is found before installing
          if [ -f "\$LATEST_WHL" ]; then
            pip install "\$LATEST_WHL"
          else
            echo "❌ No .whl file found in dist/ directory!"
            exit 1
          fi

          # Deploy Flask Application
          cat <<FLASK > app.py
          from flask import Flask

          app = Flask(__name__)

          @app.route("/")
          def home():
              return "<h1>Artifact is Running Successfully on EC2!</h1>"

          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=5000)
          FLASK

          # Stop existing Flask process if running
          pkill -f app.py || true

          # Start Flask in background
          nohup python app.py > flask.log 2>&1 &

          echo "✅ Artifact is running on EC2!"
        EOF

    - name: Print Artifact Server URL
      run: |
       PUBLIC_IP=$(dig +short ${{ secrets.EC2_HOST }} | tail -n1)
       echo "::notice::✅ Application Deployed Successfully! Click below to access it:"
       echo "::notice::🔗 [Click to Access Application](http://$PUBLIC_IP:5000/)"
 