name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  ##################### Build Python Package ################
  build:
    name: Build Python Package
    runs-on: [self-hosted]
    if: github.event.pull_request.merged == true
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir

      - name: Ensure dist directory exists
        run: mkdir -p dist

      - name: Build Python Package
        run: |
          source venv/bin/activate
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel
          ls -lah dist/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-artifact
          path: dist/

  ##################### Run Unit Tests ################
  test:
    name: Run Unit Tests
    runs-on: [self-hosted]
    needs: build
    environment: prod
    continue-on-error: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          source venv/bin/activate
          pip install pytest
          pytest test_app.py

  ##################### SonarQube Scan ################
  sonarqube:
    name: SonarQube Scan
    runs-on: [self-hosted]
    needs: test
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  #################### Publish to PyPI ################
  package-and-publish:
    name: Publish to PyPI
    runs-on: [self-hosted]
    needs: sonarqube
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment for Packaging
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Clean Dist Directory
        run: rm -rf dist

      - name: Build Package
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*

  ################### Deploy Python Artifact as Docker Image ################
  ##################### Deploy Python Artifact as Docker Image ################
  deploy-docker:
   name: Deploy Python Artifact as Docker Image
   runs-on: [self-hosted]
   needs: package-and-publish
   environment: prod

   steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: built-artifact
        path: dist/

    - name: Verify Artifact Presence
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ ERROR: 'dist/' directory not found!"
          exit 1
        fi
        
        LATEST_WHL=$(ls -t dist/*.whl | head -n 1)
        
        if [ -z "$LATEST_WHL" ]; then
          echo "❌ ERROR: No .whl file found in dist/ directory!"
          exit 1
        fi

        echo "LATEST_WHL=$LATEST_WHL" >> $GITHUB_ENV
        echo "📦 Using artifact: $LATEST_WHL"

    - name: Debug Environment Variables
      run: |
        echo "🔍 DOCKER_IMAGE: $DOCKER_IMAGE"
        echo "🔍 LATEST_WHL: $LATEST_WHL"
        ls -lah dist/

    - name: Create Dockerfile
      run: |
        cat <<EOF > Dockerfile
        FROM python:3.9-slim

        WORKDIR /app
        ARG LATEST_WHL
        COPY dist/\$LATEST_WHL /app/

        RUN pip install /app/\$LATEST_WHL

        CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=8000"]
        EOF
        echo "✅ Dockerfile created successfully!"

    - name: Authenticate with Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        echo "🔑 Docker authentication successful!"

    - name: Build and Push Docker Image
      run: |
        DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/my-app:latest"
        
        echo "🐳 Building Docker Image: $DOCKER_IMAGE"
        
        docker build --no-cache -t $DOCKER_IMAGE .
        
        echo "📤 Pushing Docker Image: $DOCKER_IMAGE"
        docker push $DOCKER_IMAGE

        echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV
        echo "✅ Docker Image successfully pushed: $DOCKER_IMAGE"

