name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  ##################### Build ################
  build:
    name: Build
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir

      - name: Clean Dist Directory
        shell: bash
        run: |
          rm -rf build dist *.egg-info

      - name: Build Package
        shell: bash
        run: |
          source venv/bin/activate
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel
          ls dist

  ##################### Unit-Test ################
  test:
    name: Unit-Test
    runs-on: [self-hosted, Linux, X64]
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        shell: bash
        run: |
          source venv/bin/activate
          pip install pytest
          pytest test_app.py

  ##################### SonarQube Scan ################
  sonarqube:
    name: SonarQube Scan
    runs-on: [self-hosted, Linux, X64]
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  ##################### Deploy to EC2 ################
  deploy:
    name: Deploy to EC2
    runs-on: [self-hosted, Linux, X64]
    needs: sonarqube

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Debug SSH Connection
        shell: bash
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -v -o StrictHostKeyChecking=no -i ec2_key.pem root@3.235.142.37 echo "SSH connection successful!"
          rm ec2_key.pem

      - name: Deploy to EC2
        shell: bash
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

          ssh -o StrictHostKeyChecking=no -i ec2_key.pem root@3.235.142.37 bash << EOF
            # Update package lists
            sudo apt-get update -y

            # Install necessary system packages
            sudo apt-get install -y python3 python3-pip python3-venv

            # Navigate to the project directory
            mkdir -p ~/cicd
            cd ~/cicd

            # Fetch the latest code (if not already on the instance)
            if [ ! -d ".git" ]; then
              git clone https://github.com/Betrand1999/cicd .
            fi
            git pull origin main

            # Set up a virtual environment
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate

            # Install dependencies
            pip install --upgrade pip
            pip install -r requirements.txt

            # Run the Flask application in the background
            nohup python -m hello_world_app.app > app.log 2>&1 &
          EOF

          # Clean up the private key file
          rm ec2_key.pem

      - name: Output Application URL
        if: success()
        run: echo "Application is accessible at http://3.235.142.37:8000"
