# File: .github/workflows/ci-cd-pipeline.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger only on pushes to the 'main' branch

jobs:
  ##################### Build ################
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: betrand1997/docker-workflow-image  # Ensure this image has necessary dependencies

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
        shell: bash  # Use Bash shell to support 'source'
        env:
          pythonLocation: /__t/Python/3.10.15/x64
          PKG_CONFIG_PATH: /__t/Python/3.10.15/x64/lib/pkgconfig
          Python_ROOT_DIR: /__t/Python/3.10.15/x64
          Python2_ROOT_DIR: /__t/Python/3.10.15/x64
          Python3_ROOT_DIR: /__t/Python/3.10.15/x64
          LD_LIBRARY_PATH: /__t/Python/3.10.15/x64/lib

      - name: Clean Dist Directory
        run: |
          rm -rf build dist *.egg-info

      - name: Build Package
        run: |
          source venv/bin/activate
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel
          ls dist
        shell: bash  # Ensure Bash shell is used
        env:
          pythonLocation: /__t/Python/3.10.15/x64
          PKG_CONFIG_PATH: /__t/Python/3.10.15/x64/lib/pkgconfig
          Python_ROOT_DIR: /__t/Python/3.10.15/x64
          Python2_ROOT_DIR: /__t/Python/3.10.15/x64
          Python3_ROOT_DIR: /__t/Python/3.10.15/x64
          LD_LIBRARY_PATH: /__t/Python/3.10.15/x64/lib

  ##################### Unit-Test ################
  test:
    name: Unit-Test
    runs-on: ubuntu-latest
    needs: build
    container:
      image: betrand1997/docker-workflow-image  # Ensure this image has necessary dependencies

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
        shell: bash  # Use Bash shell to support 'source'
        env:
          pythonLocation: /__t/Python/3.10.15/x64
          PKG_CONFIG_PATH: /__t/Python/3.10.15/x64/lib/pkgconfig
          Python_ROOT_DIR: /__t/Python/3.10.15/x64
          Python2_ROOT_DIR: /__t/Python/3.10.15/x64
          Python3_ROOT_DIR: /__t/Python/3.10.15/x64
          LD_LIBRARY_PATH: /__t/Python/3.10.15/x64/lib

      - name: Run Unit Tests
        run: |
          source venv/bin/activate
          pip install pytest
          pytest test_app.py
        shell: bash  # Ensure Bash shell is used
        env:
          pythonLocation: /__t/Python/3.10.15/x64
          PKG_CONFIG_PATH: /__t/Python/3.10.15/x64/lib/pkgconfig
          Python_ROOT_DIR: /__t/Python/3.10.15/x64
          Python2_ROOT_DIR: /__t/Python/3.10.15/x64
          Python3_ROOT_DIR: /__t/Python/3.10.15/x64
          LD_LIBRARY_PATH: /__t/Python/3.10.15/x64/lib

  ##################### SonarQube Scan ################
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necessary for SonarQube to analyze all commits

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  ##################### Publish to PyPI ################
  package-and-publish:
    name: Package and Publish to PyPI
    runs-on: ubuntu-latest
    needs: sonarqube

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
        shell: bash  # Use Bash shell to support 'source'
        env:
          pythonLocation: /__t/Python/3.10.15/x64
          PKG_CONFIG_PATH: /__t/Python/3.10.15/x64/lib/pkgconfig
          Python_ROOT_DIR: /__t/Python/3.10.15/x64
          Python2_ROOT_DIR: /__t/Python/3.10.15/x64
          Python3_ROOT_DIR: /__t/Python/3.10.15/x64
          LD_LIBRARY_PATH: /__t/Python/3.10.15/x64/lib

      - name: Install Dependencies for Packaging
        run: |
          source venv/bin/activate
          pip install --upgrade setuptools wheel twine bump2version
        shell: bash  # Ensure Bash shell is used
        env:
          pythonLocation: /__t/Python/3.10.15/x64
          PKG_CONFIG_PATH: /__t/Python/3.10.15/x64/lib/pkgconfig
          Python_ROOT_DIR: /__t/Python/3.10.15/x64
          Python2_ROOT_DIR: /__t/Python/3.10.15/x64
          Python3_ROOT_DIR: /__t/Python/3.10.15/x64
          LD_LIBRARY_PATH: /__t/Python/3.10.15/x64/lib

      - name: Bump Version
        run: |
          source venv/bin/activate
          bump2version patch  # Use 'minor' or 'major' as appropriate
        shell: bash  # Ensure Bash shell is used
        env:
          pythonLocation: /__t/Python/3.10.15/x64
          PKG_CONFIG_PATH: /__t/Python/3.10.15/x64/lib/pkgconfig
          Python_ROOT_DIR: /__t/Python/3.10.15/x64
          Python2_ROOT_DIR: /__t/Python/3.10.15/x64
          Python3_ROOT_DIR: /__t/Python/3.10.15/x64
          LD_LIBRARY_PATH: /__t/Python/3.10.15/x64/lib

      - name: Build Package Again
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel
          ls dist
        shell: bash  # Ensure Bash shell is used
        env:
          pythonLocation: /__t/Python/3.10.15/x64
          PKG_CONFIG_PATH: /__t/Python/3.10.15/x64/lib/pkgconfig
          Python_ROOT_DIR: /__t/Python/3.10.15/x64
          Python2_ROOT_DIR: /__t/Python/3.10.15/x64
          Python3_ROOT_DIR: /__t/Python/3.10.15/x64
          LD_LIBRARY_PATH: /__t/Python/3.10.15/x64/lib

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*
        shell: bash  # Ensure Bash shell is used

  ##################### Deploy to EC2 ################
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: package-and-publish

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@3.235.142.37 bash << EOF
            # Update package lists
            sudo apt-get update -y

            # Install necessary system packages
            sudo apt-get install -y python3-pip python3-venv

            # Navigate to the project directory
            cd /home/ubuntu/cicd/

            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate the virtual environment
            source venv/bin/activate

            # Upgrade pip and install the latest package
            pip install --upgrade pip setuptools wheel
            pip install --upgrade betrand-ngoh-mutagha-version

            # Verify Flask installation
            pip show flask || pip install flask

            # Restart the Flask application using systemd
            sudo systemctl daemon-reload
            sudo systemctl restart flask_app
          EOF

          # Clean up the private key file
          rm ec2_key.pem

      - name: Output Application URL
        if: success()
        run: echo "Application is accessible at http://3.235.142.37:8000"
