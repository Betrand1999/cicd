name: CI/CD Pipeline

on:
  push:
    branches:
      - main

##################### Build ################
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: betrand1997/docker-workflow-image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        shell: bash
        run: |
          python3 -m venv venv
          venv/bin/pip install --upgrade pip
          venv/bin/pip install -r requirements.txt --no-cache-dir

      # Added new fix: Remove old artifacts before building
      - name: Clean dist directory
        shell: bash
        run: |
          rm -rf dist

      - name: Build Package
        shell: bash
        run: |
          venv/bin/pip install --upgrade setuptools wheel
          venv/bin/python setup.py sdist bdist_wheel

##################### Unit-test with pytest ################
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    container:
      image: betrand1997/docker-workflow-image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python and Install Dependencies
        shell: bash
        run: |
          python3 -m venv venv
          venv/bin/pip install --upgrade pip
          venv/bin/pip install -r requirements.txt

      - name: Run Unit Tests
        shell: bash
        run: |
          venv/bin/python test_app.py

##################### Automated test with SonarQube ################
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

##################### Package and push artifact to PyPI ################
  package-and-publish:
    name: Package and Publish to PyPI
    runs-on: ubuntu-latest
    needs: sonarqube

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies for Packaging
        shell: bash
        run: |
          python3 -m venv venv
          venv/bin/pip install --upgrade pip
          venv/bin/pip install setuptools wheel twine

######## Added new fix: Remove old artifacts before building again ###########
      - name: Clean dist directory
        shell: bash
        run: |
          rm -rf dist

      - name: Build Package Again
        shell: bash
        run: |
          venv/bin/python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        shell: bash
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          venv/bin/twine upload dist/*

##################### Deploy build artifact to AWS ################
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: package-and-publish

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Deploy to EC2
        shell: bash
        run: |
          # Save the EC2 private key from secret to a file and secure it
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

          # SSH as 'ubuntu' (default user for Ubuntu AMIs)
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@3.235.142.37 << EOF
            # Update package lists
            sudo apt-get update -y

            # Install necessary system packages
            sudo apt-get install -y python3-pip python3-venv

            # Navigate to the 'cicd' directory where your project resides
            cd ~/cicd

            # Create a virtual environment named 'venv' if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate the virtual environment
            source venv/bin/activate

            # Upgrade pip within the virtual environment
            pip install --upgrade pip

            # Install your Flask application from PyPI within the virtual environment
            pip install betrand_ngoh_mutagha_version_5 --upgrade
            python -m  betrand_ngoh_mutagha_version_5.app
            

            # Install gunicorn within the virtual environment
            # pip install gunicorn --upgrade

            # Run the Flask application using gunicorn within the virtual environment
            # gunicorn --workers 3 --bind 0.0.0.0:5000 hello_world_app.app:app &
          EOF
