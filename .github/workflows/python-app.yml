name: CI/CD Pipeline

on:
  push:
    branches:
      - main
##################### Build ################
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: betrand1997/docker-workflow-image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir

      - name: Build Package
        shell: bash
        run: |
          source venv/bin/activate
          python3 setup.py sdist bdist_wheel

##################### Unit-test with pytest ################
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    container:
      image: betrand1997/docker-workflow-image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python and Install Dependencies
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        shell: bash
        run: |
          source venv/bin/activate
          pytest

##################### Automated test with sonarqube ################
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: test
    # You must have sonar-project.properties in the repository
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # For better analysis relevance

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

##################### package and push artifact to pypi ################
  package-and-publish:
    name: Package and Publish to PyPI
    runs-on: ubuntu-latest
    needs: sonarqube

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies for Packaging
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build Package Again
        shell: bash
        run: |
          source venv/bin/activate
          python3 setup.py sdist bdist_wheel

      - name: Publish to PyPI
        shell: bash
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          source venv/bin/activate
          twine upload dist/*

##################### deploy build artifac to AWS ################
  # deploy:
  #   name: Deploy to EC2
  #   runs-on: ubuntu-latest
  #   needs: package-and-publish

  #   steps:
  #     - name: Configure AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
  #         aws-region: us-east-1

  #     - name: Deploy to EC2
  #       shell: bash
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} ec2-user@<EC2-Public-IP> << EOF
  #           sudo apt-get update
  #           sudo apt-get install -y python3-pip
  #           pip3 install <your-package-name>
  #           nohup python3 -m hello_world_app.app &
  #         EOF
